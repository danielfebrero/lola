;;; /System/Library/PrivateFrameworks/CloudKitDaemon.framework/Support/cloudd
;;; macOS sandbox profile

(version 1)

(deny default)
(debug deny)

(import "system.sb")
(import "contacts.sb")

;; Workaround for <rdar://problem/16907117> Clients should open files for CKAssets
;; Remove with <rdar://problem/16923313> Remove horrible read-everything workaround in sandbox
;; When testing this profile, please comment this line out, and don't upload assets outside of one of the blessed directories below.
(allow file-read*)

;;; Override the (param ...) function to variable-quote results now that
;;; cloudd defines ENABLE_PATTERN_VARIABLES=1.
(define (var-quote-if-string obj)
  (if (and obj (string? obj)) (variable-quote obj) obj))

(let ((orig-param param))
  (set! param
    (lambda(key)
      (var-quote-if-string (orig-param key)))))

;; Homedir-relative path filters
(define (home-regex home-relative-regex)
  (regex (string-append "^" (regex-quote (param "_HOME")) home-relative-regex)))
(define (home-subpath home-relative-subpath)
  (subpath (string-append (param "_HOME") home-relative-subpath)))
(define (home-literal home-relative-literal)
  (literal (string-append (param "_HOME") home-relative-literal)))

(define (revisiond-store-paths)
  (require-any
    (mount-relative-regex #"^/\.DocumentRevisions-V100($|/)")
    (mount-relative-regex #"^/\.DocumentRevisions-V100-bad-[0-9]+($|/)")))

;; cloudd uses MMCS
(allow user-preference-read user-preference-write
       (preference-domain "com.apple.mmcs"))

;; Container-root-relative and container-cache-relative path filters
(define (container-root)
  (home-regex #"/Library/Containers/[^/]+/Data/CloudKit"))

(define (container-root-regexes container-root-relative-regex)
  (require-any
    (home-regex (string-append #"/Library/Containers/[^/]+/Data/CloudKit" container-root-relative-regex))))

(define (container-cache-root)
  (require-any
    (home-regex #"/Library/Caches/CloudKit/[^/]+/[^/]+")
    (home-regex #"/Library/Containers/[^/]+/Data/Library/Caches/CloudKit")))

(define (container-cache-regexes container-cache-relative-regex)
  (require-any
    (home-regex (string-append #"/Library/Caches/CloudKit/[^/]+/[^/]+" container-cache-relative-regex))
    (home-regex (string-append #"/Library/Containers/[^/]+/Data/Library/Caches/CloudKit" container-cache-relative-regex))))

(define (data-separated-single-path-regex data-separated-single-path-relative-regex)
  (require-all
    (subpath "/Volumes/${ANY_UUID}")
    (regex (string-append #"^/[^/]+/[^/]+" data-separated-single-path-relative-regex))))

;; Caches when running in data-separated persona context
(define (data-separated-context-root-regex data-separated-context-root-relative-regex)
  (data-separated-single-path-regex data-separated-context-root-relative-regex))

(define (data-separated-context-cache-regexes data-separated-context-cache-relative-regex)
  (require-any
    (data-separated-single-path-regex (string-append #"/Library/Caches/CloudKit" data-separated-context-cache-relative-regex))
    (require-all
      (extension "com.apple.sandbox.container")
      (require-any
        (data-separated-single-path-regex (string-append #"/Library/Containers/[^/]+/Data/Library/Caches/CloudKit" data-separated-context-cache-relative-regex))
        (data-separated-single-path-regex (string-append #"/Library/Containers/[^/]+/Data/CloudKit" data-separated-context-cache-relative-regex))))))

(allow file-read* file-write*
       (data-separated-context-root-regex #"$")
       (data-separated-context-root-regex #"/Library$")
       (data-separated-context-root-regex #"/Library/Caches$")
       (data-separated-context-cache-regexes #"($|/)"))

(with-filter (extension-class "com.apple.app-sandbox.read-write"
                              "com.apple.nsurlstorage.extension-cache")
  (allow file-issue-extension
         (data-separated-context-cache-regexes #"($|/)")))

;; cloudd maintains device identifiers that shouldn't leak to the filesystem
(allow file-read* file-write*
       (prefix "/Library/Keychains/System.keychain")
       (home-subpath "/Library/Keychains"))

;; cloudd caches
(allow file-read-metadata)

(allow file-read* file-write*
       ;; daemon caches
       (home-subpath "/Library/Caches/CloudKit")
       (home-subpath "/Library/Caches/com.apple.cloudd")

       ;; Per-container caches
       (container-root)
       (container-root-regexes #"/AssetsDb($|/)")
       (container-root-regexes #"/MMCS/[^/]+($|/)")
       (container-root-regexes #"/Records($|/)")
       (container-cache-root)
       (container-cache-regexes #"/Assets($|/)")
       (container-cache-regexes #"/FrameworkCaches($|/)")
       (container-cache-regexes #"/Packages($|/)")
       (container-cache-regexes #"/tmp($|/)")
)

;; For LaunchServices coordination
(allow file-read* file-write*
       (subpath "/Library/Caches/com.apple.cloudkit"))

;; cloudd preferences
(allow user-preference-read user-preference-write
       (preference-domain "com.apple.cloudd"
                          "com.apple.cloudd.debug"
                          "com.apple.cloudkit.partlycloudd"
                          "com.apple.cloudkit.partlycloudd.debug"))

;; CloudKit preferences.
;; Read/write by cloudd, read-only by adopters.
(allow user-preference-read user-preference-write
       (preference-domain "com.apple.CloudKit"))

;; Temp directories
(allow file-read* file-write*
       (regex (string-append "^" (regex-quote (param "_TMPDIR")) #"(\.[0-9]+)?($|/)"))
       (subpath (param "_CACHEDIR")))

;; partlycloudd getting access to sandbox-extended files
(allow file-read* file-write*
       (extension "com.apple.app-sandbox.read-write"))

;; Debug logging
(allow file-read* file-write*
       (literal "/private/var/logs/Ubiquity")
       (home-subpath "/Library/Logs/Ubiquity")
       (home-literal "/Library/Logs/ProtectedCloudStorage.log")
       (home-subpath "/Library/Logs/CrashReporter/DiagnosticLogs")
       (regex (string-append "^" (regex-quote (param "_HOME")) #"/Library/Logs/CrashReporter/CFNetwork_com\.apple\.cloudd_.*log")) ; OS X only -- home-regex is broken
       (literal "/")
)


;; I don't know what revisiond does
(allow file-read* file-write-xattr
       (revisiond-store-paths))

;; Also unknown
(allow file-read* file-write*
       (mount-relative-regex #"^/\.TemporaryItems($|/)"))


;;
;; cloudd is primarily a network technology
;;
(system-network)

(allow file-read* file-write*
       (home-literal "/Library/Caches")
       (home-subpath "/Library/Caches/com.apple.nsurlsessiond"))

(allow network-outbound
       (literal "/private/var/run/mDNSResponder")
       (remote tcp)
       (remote udp "*:443"))
       
(allow network-inbound)

(allow system-info
       (info-type "net.link.addr"))

(allow mach-lookup
       (global-name "com.apple.GSSCred")
       (global-name "com.apple.PowerManagement.control")
       (global-name "com.apple.SecureBackupDaemon")
       (global-name "com.apple.SystemConfiguration.configd")
       (global-name "com.apple.ak.anisette.xpc")
       (global-name "com.apple.ak.auth.xpc")
       (global-name "com.apple.cache_delete.public")
       (global-name "com.apple.cfnetwork.AuthBrokerAgent")
       (global-name "com.apple.cookied")
       (global-name "com.apple.coreservices.launchservicesd")
       (global-name "com.apple.duetactivityscheduler")
       (global-name "com.apple.lsd.mapdb")
       (global-name "com.apple.lsd.modifydb")
       (global-name "com.apple.mobile.keybagd.UserManager.xpc")
       (global-name "com.apple.mobile.keybagd.xpc")
       (global-name "com.apple.mobile.usermanagerd.xpc")
       (global-name "com.apple.nsurlsessiond")
       (global-name "com.apple.protectedcloudstorage.protectedcloudkeysyncing")
       (global-name "com.apple.security.octagon"))

(with-filter (extension-class "com.apple.app-sandbox.read-write"
                              "com.apple.nsurlstorage.extension-cache")
  (allow file-issue-extension
         (container-cache-root)))

;; If a client gives cloudd / partlycloudd access to its data, the daemon wants to be able to reflect that out to other processes.
(allow file-issue-extension
  (require-all
    (extension-class "com.apple.app-sandbox.read-write")
    (extension "com.apple.app-sandbox.read-write")))

;; And it loves crypto
(allow file-read-data
       (literal "/dev/aes_0"))


;; For debug logging, we're checking any DNS overrides
(allow user-preference-read
       (preference-domain "com.apple.jett.Switch")
       (preference-domain "com.apple.protectedcloudstorage.protectedcloudkeysyncing"))

(allow file-read*
       (literal "/private/etc/hosts"))


;; cloudd talks to these daemons as part of its regular job
(allow mach-lookup
       (global-name "com.apple.accountsd.accountmanager")
       (global-name "com.apple.apsd")
       (global-name "com.apple.containermanagerd")
       (global-name "com.apple.identityservicesd.pds")
       (global-name "com.apple.distributed_notifications@Uv3")
       (global-name "com.apple.distributed_notifications@1v3")
       (global-name "com.apple.tccd")
       (global-name "com.apple.tccd.system")
       (global-name "com.apple.cdp.daemon")

       ;; <rdar://problem/31765547> Add mach-lookup exception for 'com.apple.analyticsd
       (global-name "com.apple.analyticsd")

       ;; <rdar://problem/70027557> Allow mach lookups of com.apple.rtcreportingd to cloudd on macOS
       (global-name "com.apple.rtcreportingd"))


;; AddressBook
;; For ABGetSharedAddressBook on OS X (see <rdar://problem/19965241>)
(contacts-client (param "_HOME") (param "_TMPDIR"))

(allow mach-lookup
        (global-name "com.apple.system.opendirectoryd.api"))

(allow distributed-notification-post)


;;; Security.framework
(allow ipc-posix-shm-read-data ipc-posix-shm-write-create ipc-posix-shm-write-data
       (ipc-posix-name "com.apple.AppleDatabaseChanged"))


;;
;; I'm unclear who's using the following permissions
;;

(allow file-read*
       (literal "/Library/Preferences/SystemConfiguration/preferences.plist")
       (literal "/Library/Preferences/com.apple.security.plist")
       (literal "/private/var/db/DetachedSignatures")
       (literal "/private/var/run/diagnosticd/dyld_shared_cache_x86_64")
)

;; Security.framework - mds
; 1.
;    uid == 0: r+w /private/var/db/mds/system
;    uid  > 0: r+w <_DARWIN_USER_CACHE_DIR>/mds
; 2. /private/var/db/mds/system/{mdsDirectory.db,mdsObject.db}
;    uid == 0: r+w (already covered by 1)
;    uid  > 0: r
(allow file-read* file-write*
    (subpath (param "_MDSDIR")))
(allow file-read*
       (literal "/private/var/db/mds/system/mdsDirectory.db")
       (literal "/private/var/db/mds/system/mdsObject.db"))

;; Security.framework - securityMessages
;    uid  < 500: /private/var/db/mds/messages/se_SecurityMessages
;    uid >= 500: /private/var/db/mds/messages/<uid>/se_SecurityMessages
(allow file-read*
    (literal (param "_SECURITY_MESSAGES")))

(allow ipc-posix-shm-read-data
       (ipc-posix-name-regex #"^/tmp/com\.apple\.csseed\.[0-9]+$")
       (ipc-posix-name "FNetwork.defaultStorageSession"))

(allow mach-lookup
       (global-name "com.apple.CoreServices.coreservicesd")
       (global-name "com.apple.SecurityServer")
       (global-name "com.apple.coreservices.quarantine-resolver")
       (global-name "com.apple.ocspd")
       (global-name "com.apple.windowserver.active")
       (global-name "com.apple.awdd")
       (global-name "com.apple.securityd.general")
       (global-name "com.apple.securityd.xpc")
       (global-name "com.apple.UNCUserNotification")
       (global-name "com.apple.AssetCacheLocatorService")

       (global-name "com.apple.DiskArbitration.diskarbitrationd")

       ;; AutoBugCapture
       (global-name "com.apple.symptom_diagnostics")

       ;; PowerLog
       (global-name "com.apple.powerlog.plxpclogger.xpc"))

(allow mach-lookup
       (global-name "com.apple.cfnetwork.cfnetworkagent"))

;; CF / Foundation
(allow system-fsctl
       (fsctl-command HFSIOC_SET_HOTFILE_STATE))
