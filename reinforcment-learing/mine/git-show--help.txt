GIT-SHOW(1)                       Git Manual                       GIT-SHOW(1)

NNAAMMEE
       git-show - Show various types of objects

SSYYNNOOPPSSIISS
       _g_i_t _s_h_o_w [<options>] [<object>...]


DDEESSCCRRIIPPTTIIOONN
       Shows one or more objects (blobs, trees, tags and commits).

       For commits it shows the log message and textual diff. It also presents
       the merge commit in a special format as produced by _g_i_t _d_i_f_f_-_t_r_e_e _-_-_c_c.

       For tags, it shows the tag message and the referenced objects.

       For trees, it shows the names (equivalent to _g_i_t _l_s_-_t_r_e_e with
       --name-only).

       For plain blobs, it shows the plain contents.

       Some options that _g_i_t _l_o_g command understands can be used to control
       how the changes the commit introduces are shown.

       This manual page describes only the most frequently used options.

OOPPTTIIOONNSS
       <object>...
           The names of objects to show (defaults to _H_E_A_D). For a more
           complete list of ways to spell object names, see "SPECIFYING
           REVISIONS" section in ggiittrreevviissiioonnss(7).

       --pretty[=<format>], --format=<format>
           Pretty-print the contents of the commit logs in a given format,
           where _<_f_o_r_m_a_t_> can be one of _o_n_e_l_i_n_e, _s_h_o_r_t, _m_e_d_i_u_m, _f_u_l_l, _f_u_l_l_e_r,
           _r_e_f_e_r_e_n_c_e, _e_m_a_i_l, _r_a_w, _f_o_r_m_a_t_:_<_s_t_r_i_n_g_> and _t_f_o_r_m_a_t_:_<_s_t_r_i_n_g_>. When
           _<_f_o_r_m_a_t_> is none of the above, and has _%_p_l_a_c_e_h_o_l_d_e_r in it, it acts
           as if _-_-_p_r_e_t_t_y_=_t_f_o_r_m_a_t_:_<_f_o_r_m_a_t_> were given.

           See the "PRETTY FORMATS" section for some additional details for
           each format. When _=_<_f_o_r_m_a_t_> part is omitted, it defaults to _m_e_d_i_u_m.

           Note: you can specify the default pretty format in the repository
           configuration (see ggiitt--ccoonnffiigg(1)).

       --abbrev-commit
           Instead of showing the full 40-byte hexadecimal commit object name,
           show a prefix that names the object uniquely. "--abbrev=<n>" (which
           also modifies diff output, if it is displayed) option can be used
           to specify the minimum length of the prefix.

           This should make "--pretty=oneline" a whole lot more readable for
           people using 80-column terminals.

       --no-abbrev-commit
           Show the full 40-byte hexadecimal commit object name. This negates
           ----aabbbbrreevv--ccoommmmiitt, either explicit or implied by other options such
           as "--oneline". It also overrides the lloogg..aabbbbrreevvCCoommmmiitt variable.

       --oneline
           This is a shorthand for "--pretty=oneline --abbrev-commit" used
           together.

       --encoding=<encoding>
           Commit objects record the character encoding used for the log
           message in their encoding header; this option can be used to tell
           the command to re-code the commit log message in the encoding
           preferred by the user. For non plumbing commands this defaults to
           UTF-8. Note that if an object claims to be encoded in XX and we are
           outputting in XX, we will output the object verbatim; this means
           that invalid sequences in the original commit may be copied to the
           output. Likewise, if iconv(3) fails to convert the commit, we will
           quietly output the original object verbatim.

       --expand-tabs=<n>, --expand-tabs, --no-expand-tabs
           Perform a tab expansion (replace each tab with enough spaces to
           fill to the next display column that is a multiple of _<_n_>) in the
           log message before showing it in the output.  ----eexxppaanndd--ttaabbss is a
           short-hand for ----eexxppaanndd--ttaabbss==88, and ----nnoo--eexxppaanndd--ttaabbss is a
           short-hand for ----eexxppaanndd--ttaabbss==00, which disables tab expansion.

           By default, tabs are expanded in pretty formats that indent the log
           message by 4 spaces (i.e.  _m_e_d_i_u_m, which is the default, _f_u_l_l, and
           _f_u_l_l_e_r).

       --notes[=<ref>]
           Show the notes (see ggiitt--nnootteess(1)) that annotate the commit, when
           showing the commit log message. This is the default for ggiitt lloogg,
           ggiitt sshhooww and ggiitt wwhhaattcchhaannggeedd commands when there is no ----pprreettttyy,
           ----ffoorrmmaatt, or ----oonneelliinnee option given on the command line.

           By default, the notes shown are from the notes refs listed in the
           ccoorree..nnootteessRReeff and nnootteess..ddiissppllaayyRReeff variables (or corresponding
           environment overrides). See ggiitt--ccoonnffiigg(1) for more details.

           With an optional _<_r_e_f_> argument, use the ref to find the notes to
           display. The ref can specify the full refname when it begins with
           rreeffss//nnootteess//; when it begins with nnootteess//, rreeffss// and otherwise
           rreeffss//nnootteess// is prefixed to form the full name of the ref.

           Multiple --notes options can be combined to control which notes are
           being displayed. Examples: "--notes=foo" will show only notes from
           "refs/notes/foo"; "--notes=foo --notes" will show both notes from
           "refs/notes/foo" and from the default notes ref(s).

       --no-notes
           Do not show notes. This negates the above ----nnootteess option, by
           resetting the list of notes refs from which notes are shown.
           Options are parsed in the order given on the command line, so e.g.
           "--notes --notes=foo --no-notes --notes=bar" will only show notes
           from "refs/notes/bar".

       --show-notes-by-default
           Show the default notes unless options for displaying specific notes
           are given.

       --show-notes[=<ref>], --[no-]standard-notes
           These options are deprecated. Use the above --notes/--no-notes
           options instead.

       --show-signature
           Check the validity of a signed commit object by passing the
           signature to ggppgg ----vveerriiffyy and show the output.

PPRREETTTTYY FFOORRMMAATTSS
       If the commit is a merge, and if the pretty-format is not _o_n_e_l_i_n_e,
       _e_m_a_i_l or _r_a_w, an additional line is inserted before the _A_u_t_h_o_r_: line.
       This line begins with "Merge: " and the hashes of ancestral commits are
       printed, separated by spaces. Note that the listed commits may not
       necessarily be the list of the ddiirreecctt parent commits if you have
       limited your view of history: for example, if you are only interested
       in changes related to a certain directory or file.

       There are several built-in formats, and you can define additional
       formats by setting a pretty.<name> config option to either another
       format name, or a _f_o_r_m_a_t_: string, as described below (see ggiitt--
       ccoonnffiigg(1)). Here are the details of the built-in formats:

       •   _o_n_e_l_i_n_e

               <hash> <title-line>

           This is designed to be as compact as possible.

       •   _s_h_o_r_t

               commit <hash>
               Author: <author>

               <title-line>

       •   _m_e_d_i_u_m

               commit <hash>
               Author: <author>
               Date:   <author-date>

               <title-line>

               <full-commit-message>

       •   _f_u_l_l

               commit <hash>
               Author: <author>
               Commit: <committer>

               <title-line>

               <full-commit-message>

       •   _f_u_l_l_e_r

               commit <hash>
               Author:     <author>
               AuthorDate: <author-date>
               Commit:     <committer>
               CommitDate: <committer-date>

               <title-line>

               <full-commit-message>

       •   _r_e_f_e_r_e_n_c_e

               <abbrev-hash> (<title-line>, <short-author-date>)

           This format is used to refer to another commit in a commit message
           and is the same as ----pprreettttyy==''ffoorrmmaatt::%%CC((aauuttoo))%%hh ((%%ss,, %%aadd))''. By
           default, the date is formatted with ----ddaattee==sshhoorrtt unless another
           ----ddaattee option is explicitly specified. As with any ffoorrmmaatt:: with
           format placeholders, its output is not affected by other options
           like ----ddeeccoorraattee and ----wwaallkk--rreeffllooggss.

       •   _e_m_a_i_l

               From <hash> <date>
               From: <author>
               Date: <author-date>
               Subject: [PATCH] <title-line>

               <full-commit-message>

       •   _m_b_o_x_r_d

           Like _e_m_a_i_l, but lines in the commit message starting with "From "
           (preceded by zero or more ">") are quoted with ">" so they aren’t
           confused as starting a new commit.

       •   _r_a_w

           The _r_a_w format shows the entire commit exactly as stored in the
           commit object. Notably, the hashes are displayed in full,
           regardless of whether --abbrev or --no-abbrev are used, and _p_a_r_e_n_t_s
           information show the true parent commits, without taking grafts or
           history simplification into account. Note that this format affects
           the way commits are displayed, but not the way the diff is shown
           e.g. with ggiitt lloogg ----rraaww. To get full object names in a raw diff
           format, use ----nnoo--aabbbbrreevv.

       •   _f_o_r_m_a_t_:_<_f_o_r_m_a_t_-_s_t_r_i_n_g_>

           The _f_o_r_m_a_t_:_<_f_o_r_m_a_t_-_s_t_r_i_n_g_> format allows you to specify which
           information you want to show. It works a little bit like printf
           format, with the notable exception that you get a newline with _%_n
           instead of _\_n.

           E.g, _f_o_r_m_a_t_:_"_T_h_e _a_u_t_h_o_r _o_f _%_h _w_a_s _%_a_n_, _%_a_r_%_n_T_h_e _t_i_t_l_e _w_a_s _>_>_%_s_<_<_%_n_"
           would show something like this:

               The author of fe6e0ee was Junio C Hamano, 23 hours ago
               The title was >>t4119: test autocomputing -p<n> for traditional diff input.<<

           The placeholders are:

           •   Placeholders that expand to a single literal character:

               _%_n
                   newline

               _%_%
                   a raw _%

               _%_x_0_0
                   _%_x followed by two hexadecimal digits is replaced with a
                   byte with the hexadecimal digits' value (we will call this
                   "literal formatting code" in the rest of this document).

           •   Placeholders that affect formatting of later placeholders:

               _%_C_r_e_d
                   switch color to red

               _%_C_g_r_e_e_n
                   switch color to green

               _%_C_b_l_u_e
                   switch color to blue

               _%_C_r_e_s_e_t
                   reset color

               _%_C_(_._._._)
                   color specification, as described under Values in the
                   "CONFIGURATION FILE" section of ggiitt--ccoonnffiigg(1). By default,
                   colors are shown only when enabled for log output (by
                   ccoolloorr..ddiiffff, ccoolloorr..uuii, or ----ccoolloorr, and respecting the aauuttoo
                   settings of the former if we are going to a terminal).
                   %%CC((aauuttoo,,......)) is accepted as a historical synonym for the
                   default (e.g., %%CC((aauuttoo,,rreedd))). Specifying %%CC((aallwwaayyss,,......))
                   will show the colors even when color is not otherwise
                   enabled (though consider just using ----ccoolloorr==aallwwaayyss to
                   enable color for the whole output, including this format
                   and anything else git might color).  aauuttoo alone (i.e.
                   %%CC((aauuttoo))) will turn on auto coloring on the next
                   placeholders until the color is switched again.

               _%_m
                   left (<<), right (>>) or boundary (--) mark

               _%_w_(_[_<_w_>_[_,_<_i_1_>_[_,_<_i_2_>_]_]_]_)
                   switch line wrapping, like the -w option of ggiitt--
                   sshhoorrttlloogg(1).

               _%_<_( _<_N_> _[_,_t_r_u_n_c_|_l_t_r_u_n_c_|_m_t_r_u_n_c_]_)
                   make the next placeholder take at least N column widths,
                   padding spaces on the right if necessary. Optionally
                   truncate (with ellipsis _._.) at the left (ltrunc) ....fftt, the
                   middle (mtrunc) mmii....llee, or the end (trunc) rriigg...., if the
                   output is longer than N columns. Note 1: that truncating
                   only works correctly with N >= 2. Note 2: spaces around the
                   N and M (see below) values are optional. Note 3: Emojis and
                   other wide characters will take two display columns, which
                   may over-run column boundaries. Note 4: decomposed
                   character combining marks may be misplaced at padding
                   boundaries.

               _%_<_|_( _<_M_> _)
                   make the next placeholder take at least until Mth display
                   column, padding spaces on the right if necessary. Use
                   negative M values for column positions measured from the
                   right hand edge of the terminal window.

               _%_>_( _<_N_> _), _%_>_|_( _<_M_> _)
                   similar to _%_<_( _<_N_> _), _%_<_|_( _<_M_> _) respectively, but padding
                   spaces on the left

               _%_>_>_( _<_N_> _), _%_>_>_|_( _<_M_> _)
                   similar to _%_>_( _<_N_> _), _%_>_|_( _<_M_> _) respectively, except that
                   if the next placeholder takes more spaces than given and
                   there are spaces on its left, use those spaces

               _%_>_<_( _<_N_> _), _%_>_<_|_( _<_M_> _)
                   similar to _%_<_( _<_N_> _), _%_<_|_( _<_M_> _) respectively, but padding
                   both sides (i.e. the text is centered)

           •   Placeholders that expand to information extracted from the
               commit:

               _%_H
                   commit hash

               _%_h
                   abbreviated commit hash

               _%_T
                   tree hash

               _%_t
                   abbreviated tree hash

               _%_P
                   parent hashes

               _%_p
                   abbreviated parent hashes

               _%_a_n
                   author name

               _%_a_N
                   author name (respecting .mailmap, see ggiitt--sshhoorrttlloogg(1) or
                   ggiitt--bbllaammee(1))

               _%_a_e
                   author email

               _%_a_E
                   author email (respecting .mailmap, see ggiitt--sshhoorrttlloogg(1) or
                   ggiitt--bbllaammee(1))

               _%_a_l
                   author email local-part (the part before the _@ sign)

               _%_a_L
                   author local-part (see _%_a_l) respecting .mailmap, see ggiitt--
                   sshhoorrttlloogg(1) or ggiitt--bbllaammee(1))

               _%_a_d
                   author date (format respects --date= option)

               _%_a_D
                   author date, RFC2822 style

               _%_a_r
                   author date, relative

               _%_a_t
                   author date, UNIX timestamp

               _%_a_i
                   author date, ISO 8601-like format

               _%_a_I
                   author date, strict ISO 8601 format

               _%_a_s
                   author date, short format (YYYYYYYY--MMMM--DDDD)

               _%_a_h
                   author date, human style (like the ----ddaattee==hhuummaann option of
                   ggiitt--rreevv--lliisstt(1))

               _%_c_n
                   committer name

               _%_c_N
                   committer name (respecting .mailmap, see ggiitt--sshhoorrttlloogg(1) or
                   ggiitt--bbllaammee(1))

               _%_c_e
                   committer email

               _%_c_E
                   committer email (respecting .mailmap, see ggiitt--sshhoorrttlloogg(1)
                   or ggiitt--bbllaammee(1))

               _%_c_l
                   committer email local-part (the part before the _@ sign)

               _%_c_L
                   committer local-part (see _%_c_l) respecting .mailmap, see
                   ggiitt--sshhoorrttlloogg(1) or ggiitt--bbllaammee(1))

               _%_c_d
                   committer date (format respects --date= option)

               _%_c_D
                   committer date, RFC2822 style

               _%_c_r
                   committer date, relative

               _%_c_t
                   committer date, UNIX timestamp

               _%_c_i
                   committer date, ISO 8601-like format

               _%_c_I
                   committer date, strict ISO 8601 format

               _%_c_s
                   committer date, short format (YYYYYYYY--MMMM--DDDD)

               _%_c_h
                   committer date, human style (like the ----ddaattee==hhuummaann option
                   of ggiitt--rreevv--lliisstt(1))

               _%_d
                   ref names, like the --decorate option of ggiitt--lloogg(1)

               _%_D
                   ref names without the " (", ")" wrapping.

               _%_(_d_e_c_o_r_a_t_e_[_:_<_o_p_t_i_o_n_s_>_]_)
                   ref names with custom decorations. The ddeeccoorraattee string may
                   be followed by a colon and zero or more comma-separated
                   options. Option values may contain literal formatting
                   codes. These must be used for commas (%%xx22CC) and closing
                   parentheses (%%xx2299), due to their role in the option syntax.

                   •   _p_r_e_f_i_x_=_<_v_a_l_u_e_>: Shown before the list of ref names.
                       Defaults to " ((".

                   •   _s_u_f_f_i_x_=_<_v_a_l_u_e_>: Shown after the list of ref names.
                       Defaults to "))".

                   •   _s_e_p_a_r_a_t_o_r_=_<_v_a_l_u_e_>: Shown between ref names. Defaults to
                       ",, ".

                   •   _p_o_i_n_t_e_r_=_<_v_a_l_u_e_>: Shown between HEAD and the branch it
                       points to, if any. Defaults to " -->> ".

                   •   _t_a_g_=_<_v_a_l_u_e_>: Shown before tag names. Defaults to
                       "ttaagg:: ".

                   For example, to produce decorations with no wrapping or tag
                   annotations, and spaces as separators:

                   %%((ddeeccoorraattee::pprreeffiixx==,,ssuuffffiixx==,,ttaagg==,,sseeppaarraattoorr== ))

               _%_(_d_e_s_c_r_i_b_e_[_:_<_o_p_t_i_o_n_s_>_]_)
                   human-readable name, like ggiitt--ddeessccrriibbee(1); empty string for
                   undescribable commits. The ddeessccrriibbee string may be followed
                   by a colon and zero or more comma-separated options.
                   Descriptions can be inconsistent when tags are added or
                   removed at the same time.

                   •   _t_a_g_s_[_=_<_b_o_o_l_-_v_a_l_u_e_>_]: Instead of only considering
                       annotated tags, consider lightweight tags as well.

                   •   _a_b_b_r_e_v_=_<_n_u_m_b_e_r_>: Instead of using the default number of
                       hexadecimal digits (which will vary according to the
                       number of objects in the repository with a default of
                       7) of the abbreviated object name, use <number> digits,
                       or as many digits as needed to form a unique object
                       name.

                   •   _m_a_t_c_h_=_<_p_a_t_t_e_r_n_>: Only consider tags matching the given
                       gglloobb((77)) pattern, excluding the "refs/tags/" prefix.

                   •   _e_x_c_l_u_d_e_=_<_p_a_t_t_e_r_n_>: Do not consider tags matching the
                       given gglloobb((77)) pattern, excluding the "refs/tags/"
                       prefix.

               _%_S
                   ref name given on the command line by which the commit was
                   reached (like ggiitt lloogg ----ssoouurrccee), only works with ggiitt lloogg

               _%_e
                   encoding

               _%_s
                   subject

               _%_f
                   sanitized subject line, suitable for a filename

               _%_b
                   body

               _%_B
                   raw body (unwrapped subject and body)

               _%_N
                   commit notes

               _%_G_G
                   raw verification message from GPG for a signed commit

               _%_G_?
                   show "G" for a good (valid) signature, "B" for a bad
                   signature, "U" for a good signature with unknown validity,
                   "X" for a good signature that has expired, "Y" for a good
                   signature made by an expired key, "R" for a good signature
                   made by a revoked key, "E" if the signature cannot be
                   checked (e.g. missing key) and "N" for no signature

               _%_G_S
                   show the name of the signer for a signed commit

               _%_G_K
                   show the key used to sign a signed commit

               _%_G_F
                   show the fingerprint of the key used to sign a signed
                   commit

               _%_G_P
                   show the fingerprint of the primary key whose subkey was
                   used to sign a signed commit

               _%_G_T
                   show the trust level for the key used to sign a signed
                   commit

               _%_g_D
                   reflog selector, e.g., rreeffss//ssttaasshh@@{{11}} or rreeffss//ssttaasshh@@{{22
                   mmiinnuutteess aaggoo}}; the format follows the rules described for
                   the --gg option. The portion before the @@ is the refname as
                   given on the command line (so ggiitt lloogg --gg rreeffss//hheeaaddss//mmaasstteerr
                   would yield rreeffss//hheeaaddss//mmaasstteerr@@{{00}}).

               _%_g_d
                   shortened reflog selector; same as %%ggDD, but the refname
                   portion is shortened for human readability (so
                   rreeffss//hheeaaddss//mmaasstteerr becomes just mmaasstteerr).

               _%_g_n
                   reflog identity name

               _%_g_N
                   reflog identity name (respecting .mailmap, see ggiitt--
                   sshhoorrttlloogg(1) or ggiitt--bbllaammee(1))

               _%_g_e
                   reflog identity email

               _%_g_E
                   reflog identity email (respecting .mailmap, see ggiitt--
                   sshhoorrttlloogg(1) or ggiitt--bbllaammee(1))

               _%_g_s
                   reflog subject

               _%_(_t_r_a_i_l_e_r_s_[_:_<_o_p_t_i_o_n_s_>_]_)
                   display the trailers of the body as interpreted by ggiitt--
                   iinntteerrpprreett--ttrraaiilleerrss(1). The ttrraaiilleerrss string may be followed
                   by a colon and zero or more comma-separated options. If any
                   option is provided multiple times, the last occurrence
                   wins.

                   •   _k_e_y_=_<_k_e_y_>: only show trailers with specified <key>.
                       Matching is done case-insensitively and trailing colon
                       is optional. If option is given multiple times trailer
                       lines matching any of the keys are shown. This option
                       automatically enables the oonnllyy option so that
                       non-trailer lines in the trailer block are hidden. If
                       that is not desired it can be disabled with oonnllyy==ffaallssee.
                       E.g., %%((ttrraaiilleerrss::kkeeyy==RReevviieewweedd--bbyy)) shows trailer lines
                       with key RReevviieewweedd--bbyy.

                   •   _o_n_l_y_[_=_<_b_o_o_l_>_]: select whether non-trailer lines from
                       the trailer block should be included.

                   •   _s_e_p_a_r_a_t_o_r_=_<_s_e_p_>: specify the separator inserted between
                       trailer lines. Defaults to a line feed character. The
                       string <sep> may contain the literal formatting codes
                       described above. To use comma as separator one must use
                       %%xx22CC as it would otherwise be parsed as next option.
                       E.g., %%((ttrraaiilleerrss::kkeeyy==TTiicckkeett,,sseeppaarraattoorr==%%xx22CC )) shows all
                       trailer lines whose key is "Ticket" separated by a
                       comma and a space.

                   •   _u_n_f_o_l_d_[_=_<_b_o_o_l_>_]: make it behave as if
                       interpret-trailer’s ----uunnffoolldd option was given. E.g.,
                       %%((ttrraaiilleerrss::oonnllyy,,uunnffoolldd==ttrruuee)) unfolds and shows all
                       trailer lines.

                   •   _k_e_y_o_n_l_y_[_=_<_b_o_o_l_>_]: only show the key part of the
                       trailer.

                   •   _v_a_l_u_e_o_n_l_y_[_=_<_b_o_o_l_>_]: only show the value part of the
                       trailer.

                   •   _k_e_y___v_a_l_u_e___s_e_p_a_r_a_t_o_r_=_<_s_e_p_>: specify the separator
                       inserted between the key and value of each trailer.
                       Defaults to ": ". Otherwise it shares the same
                       semantics as _s_e_p_a_r_a_t_o_r_=_<_s_e_p_> above.

           NNoottee

           Some placeholders may depend on other options given to the revision
           traversal engine. For example, the %%gg** reflog options will insert
           an empty string unless we are traversing reflog entries (e.g., by
           ggiitt lloogg --gg). The %%dd and %%DD placeholders will use the "short"
           decoration format if ----ddeeccoorraattee was not already provided on the
           command line.

       The boolean options accept an optional value [[==<<bbooooll--vvaalluuee>>]]. The
       values ttrruuee, ffaallssee, oonn, ooffff etc. are all accepted. See the "boolean"
       sub-section in "EXAMPLES" in ggiitt--ccoonnffiigg(1). If a boolean option is
       given with no value, it’s enabled.

       If you add a ++ (plus sign) after _% of a placeholder, a line-feed is
       inserted immediately before the expansion if and only if the
       placeholder expands to a non-empty string.

       If you add a -- (minus sign) after _% of a placeholder, all consecutive
       line-feeds immediately preceding the expansion are deleted if and only
       if the placeholder expands to an empty string.

       If you add a ` ` (space) after _% of a placeholder, a space is inserted
       immediately before the expansion if and only if the placeholder expands
       to a non-empty string.

       •   _t_f_o_r_m_a_t_:

           The _t_f_o_r_m_a_t_: format works exactly like _f_o_r_m_a_t_:, except that it
           provides "terminator" semantics instead of "separator" semantics.
           In other words, each commit has the message terminator character
           (usually a newline) appended, rather than a separator placed
           between entries. This means that the final entry of a single-line
           format will be properly terminated with a new line, just as the
           "oneline" format does. For example:

               $ git log -2 --pretty=format:%h 4da45bef \
                 | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
               4da45be
               7134973 -- NO NEWLINE

               $ git log -2 --pretty=tformat:%h 4da45bef \
                 | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
               4da45be
               7134973

           In addition, any unrecognized string that has a %% in it is
           interpreted as if it has ttffoorrmmaatt:: in front of it. For example,
           these two are equivalent:

               $ git log -2 --pretty=tformat:%h 4da45bef
               $ git log -2 --pretty=%h 4da45bef


DDIIFFFF FFOORRMMAATTTTIINNGG
       The options below can be used to change the way ggiitt sshhooww generates diff
       output.

       -p, -u, --patch
           Generate patch (see the section called “GENERATING PATCH TEXT WITH
           -P”).

       -s, --no-patch
           Suppress all output from the diff machinery. Useful for commands
           like ggiitt sshhooww that show the patch by default to squelch their
           output, or to cancel the effect of options like ----ppaattcchh, ----ssttaatt
           earlier on the command line in an alias.

       -m
           Show diffs for merge commits in the default format. This is similar
           to _-_-_d_i_f_f_-_m_e_r_g_e_s_=_o_n, except --mm will produce no output unless --pp is
           given as well.

       -c
           Produce combined diff output for merge commits. Shortcut for
           _-_-_d_i_f_f_-_m_e_r_g_e_s_=_c_o_m_b_i_n_e_d _-_p.

       --cc
           Produce dense combined diff output for merge commits. Shortcut for
           _-_-_d_i_f_f_-_m_e_r_g_e_s_=_d_e_n_s_e_-_c_o_m_b_i_n_e_d _-_p.

       --dd
           Produce diff with respect to first parent for both merge and
           regular commits. Shortcut for _-_-_d_i_f_f_-_m_e_r_g_e_s_=_f_i_r_s_t_-_p_a_r_e_n_t _-_p.

       --remerge-diff
           Produce remerge-diff output for merge commits. Shortcut for
           _-_-_d_i_f_f_-_m_e_r_g_e_s_=_r_e_m_e_r_g_e _-_p.

       --no-diff-merges
           Synonym for _-_-_d_i_f_f_-_m_e_r_g_e_s_=_o_f_f.

       --diff-merges=<format>
           Specify diff format to be used for merge commits. Default is
           ddeennssee--ccoommbbiinneedd unless ----ffiirrsstt--ppaarreenntt is in use, in which case
           ffiirrsstt--ppaarreenntt is the default.

           The following formats are supported:

           off, none
               Disable output of diffs for merge commits. Useful to override
               implied value.

           on, m
               Make diff output for merge commits to be shown in the default
               format. The default format can be changed using lloogg..ddiiffffMMeerrggeess
               configuration variable, whose default value is sseeppaarraattee.

           first-parent, 1
               Show full diff with respect to first parent. This is the same
               format as ----ppaattcchh produces for non-merge commits.

           separate
               Show full diff with respect to each of parents. Separate log
               entry and diff is generated for each parent.

           combined, c
               Show differences from each of the parents to the merge result
               simultaneously instead of showing pairwise diff between a
               parent and the result one at a time. Furthermore, it lists only
               files which were modified from all parents.

           dense-combined, cc
               Further compress output produced by ----ddiiffff--mmeerrggeess==ccoommbbiinneedd by
               omitting uninteresting hunks whose contents in the parents have
               only two variants and the merge result picks one of them
               without modification.

           remerge, r
               Remerge two-parent merge commits to create a temporary tree
               object—potentially containing files with conflict markers and
               such. A diff is then shown between that temporary tree and the
               actual merge commit.

               The output emitted when this option is used is subject to
               change, and so is its interaction with other options (unless
               explicitly documented).

       --combined-all-paths
           This flag causes combined diffs (used for merge commits) to list
           the name of the file from all parents. It thus only has effect when
           ----ddiiffff--mmeerrggeess==[[ddeennssee--]]ccoommbbiinneedd is in use, and is likely only useful
           if filename changes are detected (i.e. when either rename or copy
           detection have been requested).

       -U<n>, --unified=<n>
           Generate diffs with <n> lines of context instead of the usual
           three. Implies ----ppaattcchh.

       --output=<file>
           Output to a specific file instead of stdout.

       --output-indicator-new=<char>, --output-indicator-old=<char>,
       --output-indicator-context=<char>
           Specify the character used to indicate new, old or context lines in
           the generated patch. Normally they are _+, _- and ' ' respectively.

       --raw
           For each commit, show a summary of changes using the raw diff
           format. See the "RAW OUTPUT FORMAT" section of ggiitt--ddiiffff(1). This is
           different from showing the log itself in raw format, which you can
           achieve with ----ffoorrmmaatt==rraaww.

       --patch-with-raw
           Synonym for --pp ----rraaww.

       -t
           Show the tree objects in the diff output.

       --indent-heuristic
           Enable the heuristic that shifts diff hunk boundaries to make
           patches easier to read. This is the default.

       --no-indent-heuristic
           Disable the indent heuristic.

       --minimal
           Spend extra time to make sure the smallest possible diff is
           produced.

       --patience
           Generate a diff using the "patience diff" algorithm.

       --histogram
           Generate a diff using the "histogram diff" algorithm.

       --anchored=<text>
           Generate a diff using the "anchored diff" algorithm.

           This option may be specified more than once.

           If a line exists in both the source and destination, exists only
           once, and starts with this text, this algorithm attempts to prevent
           it from appearing as a deletion or addition in the output. It uses
           the "patience diff" algorithm internally.

       --diff-algorithm={patience|minimal|histogram|myers}
           Choose a diff algorithm. The variants are as follows:

           ddeeffaauulltt, mmyyeerrss
               The basic greedy diff algorithm. Currently, this is the
               default.

           mmiinniimmaall
               Spend extra time to make sure the smallest possible diff is
               produced.

           ppaattiieennccee
               Use "patience diff" algorithm when generating patches.

           hhiissttooggrraamm
               This algorithm extends the patience algorithm to "support
               low-occurrence common elements".

           For instance, if you configured the ddiiffff..aallggoorriitthhmm variable to a
           non-default value and want to use the default one, then you have to
           use ----ddiiffff--aallggoorriitthhmm==ddeeffaauulltt option.

       --stat[=<width>[,<name-width>[,<count>]]]
           Generate a diffstat. By default, as much space as necessary will be
           used for the filename part, and the rest for the graph part.
           Maximum width defaults to terminal width, or 80 columns if not
           connected to a terminal, and can be overridden by <<wwiiddtthh>>. The
           width of the filename part can be limited by giving another width
           <<nnaammee--wwiiddtthh>> after a comma or by setting
           ddiiffff..ssttaattNNaammeeWWiiddtthh==<<wwiiddtthh>>. The width of the graph part can be
           limited by using ----ssttaatt--ggrraapphh--wwiiddtthh==<<wwiiddtthh>> or by setting
           ddiiffff..ssttaattGGrraapphhWWiiddtthh==<<wwiiddtthh>>. Using ----ssttaatt or ----ssttaatt--ggrraapphh--wwiiddtthh
           affects all commands generating a stat graph, while setting
           ddiiffff..ssttaattNNaammeeWWiiddtthh or ddiiffff..ssttaattGGrraapphhWWiiddtthh does not affect ggiitt
           ffoorrmmaatt--ppaattcchh. By giving a third parameter <<ccoouunntt>>, you can limit
           the output to the first <<ccoouunntt>> lines, followed by ...... if there are
           more.

           These parameters can also be set individually with
           ----ssttaatt--wwiiddtthh==<<wwiiddtthh>>, ----ssttaatt--nnaammee--wwiiddtthh==<<nnaammee--wwiiddtthh>> and
           ----ssttaatt--ccoouunntt==<<ccoouunntt>>.

       --compact-summary
           Output a condensed summary of extended header information such as
           file creations or deletions ("new" or "gone", optionally "+l" if
           it’s a symlink) and mode changes ("+x" or "-x" for adding or
           removing executable bit respectively) in diffstat. The information
           is put between the filename part and the graph part. Implies
           ----ssttaatt.

       --numstat
           Similar to ----ssttaatt, but shows number of added and deleted lines in
           decimal notation and pathname without abbreviation, to make it more
           machine friendly. For binary files, outputs two -- instead of saying
           00 00.

       --shortstat
           Output only the last line of the ----ssttaatt format containing total
           number of modified files, as well as number of added and deleted
           lines.

       -X[<param1,param2,...>], --dirstat[=<param1,param2,...>]
           Output the distribution of relative amount of changes for each
           sub-directory. The behavior of ----ddiirrssttaatt can be customized by
           passing it a comma separated list of parameters. The defaults are
           controlled by the ddiiffff..ddiirrssttaatt configuration variable (see ggiitt--
           ccoonnffiigg(1)). The following parameters are available:

           cchhaannggeess
               Compute the dirstat numbers by counting the lines that have
               been removed from the source, or added to the destination. This
               ignores the amount of pure code movements within a file. In
               other words, rearranging lines in a file is not counted as much
               as other changes. This is the default behavior when no
               parameter is given.

           lliinneess
               Compute the dirstat numbers by doing the regular line-based
               diff analysis, and summing the removed/added line counts. (For
               binary files, count 64-byte chunks instead, since binary files
               have no natural concept of lines). This is a more expensive
               ----ddiirrssttaatt behavior than the cchhaannggeess behavior, but it does count
               rearranged lines within a file as much as other changes. The
               resulting output is consistent with what you get from the other
               ----**ssttaatt options.

           ffiilleess
               Compute the dirstat numbers by counting the number of files
               changed. Each changed file counts equally in the dirstat
               analysis. This is the computationally cheapest ----ddiirrssttaatt
               behavior, since it does not have to look at the file contents
               at all.

           ccuummuullaattiivvee
               Count changes in a child directory for the parent directory as
               well. Note that when using ccuummuullaattiivvee, the sum of the
               percentages reported may exceed 100%. The default
               (non-cumulative) behavior can be specified with the
               nnoonnccuummuullaattiivvee parameter.

           <limit>
               An integer parameter specifies a cut-off percent (3% by
               default). Directories contributing less than this percentage of
               the changes are not shown in the output.

           Example: The following will count changed files, while ignoring
           directories with less than 10% of the total amount of changed
           files, and accumulating child directory counts in the parent
           directories: ----ddiirrssttaatt==ffiilleess,,1100,,ccuummuullaattiivvee.

       --cumulative
           Synonym for --dirstat=cumulative

       --dirstat-by-file[=<param1,param2>...]
           Synonym for --dirstat=files,<param1>,<param2>...

       --summary
           Output a condensed summary of extended header information such as
           creations, renames and mode changes.

       --patch-with-stat
           Synonym for --pp ----ssttaatt.

       -z
           Separate the commits with NULs instead of newlines.

           Also, when ----rraaww or ----nnuummssttaatt has been given, do not munge
           pathnames and use NULs as output field terminators.

           Without this option, pathnames with "unusual" characters are quoted
           as explained for the configuration variable ccoorree..qquuootteePPaatthh (see
           ggiitt--ccoonnffiigg(1)).

       --name-only
           Show only names of changed files. The file names are often encoded
           in UTF-8. For more information see the discussion about encoding in
           the ggiitt--lloogg(1) manual page.

       --name-status
           Show only names and status of changed files. See the description of
           the ----ddiiffff--ffiilltteerr option on what the status letters mean. Just like
           ----nnaammee--oonnllyy the file names are often encoded in UTF-8.

       --submodule[=<format>]
           Specify how differences in submodules are shown. When specifying
           ----ssuubbmmoodduullee==sshhoorrtt the _s_h_o_r_t format is used. This format just shows
           the names of the commits at the beginning and end of the range.
           When ----ssuubbmmoodduullee or ----ssuubbmmoodduullee==lloogg is specified, the _l_o_g format is
           used. This format lists the commits in the range like ggiitt--
           ssuubbmmoodduullee(1) ssuummmmaarryy does. When ----ssuubbmmoodduullee==ddiiffff is specified, the
           _d_i_f_f format is used. This format shows an inline diff of the
           changes in the submodule contents between the commit range.
           Defaults to ddiiffff..ssuubbmmoodduullee or the _s_h_o_r_t format if the config option
           is unset.

       --color[=<when>]
           Show colored diff.  ----ccoolloorr (i.e. without _=_<_w_h_e_n_>) is the same as
           ----ccoolloorr==aallwwaayyss.  _<_w_h_e_n_> can be one of aallwwaayyss, nneevveerr, or aauuttoo.

       --no-color
           Turn off colored diff. It is the same as ----ccoolloorr==nneevveerr.

       --color-moved[=<mode>]
           Moved lines of code are colored differently. The <mode> defaults to
           _n_o if the option is not given and to _z_e_b_r_a if the option with no
           mode is given. The mode must be one of:

           no
               Moved lines are not highlighted.

           default
               Is a synonym for zzeebbrraa. This may change to a more sensible mode
               in the future.

           plain
               Any line that is added in one location and was removed in
               another location will be colored with _c_o_l_o_r_._d_i_f_f_._n_e_w_M_o_v_e_d.
               Similarly _c_o_l_o_r_._d_i_f_f_._o_l_d_M_o_v_e_d will be used for removed lines
               that are added somewhere else in the diff. This mode picks up
               any moved line, but it is not very useful in a review to
               determine if a block of code was moved without permutation.

           blocks
               Blocks of moved text of at least 20 alphanumeric characters are
               detected greedily. The detected blocks are painted using either
               the _c_o_l_o_r_._d_i_f_f_._{_o_l_d_,_n_e_w_}_M_o_v_e_d color. Adjacent blocks cannot be
               told apart.

           zebra
               Blocks of moved text are detected as in _b_l_o_c_k_s mode. The blocks
               are painted using either the _c_o_l_o_r_._d_i_f_f_._{_o_l_d_,_n_e_w_}_M_o_v_e_d color or
               _c_o_l_o_r_._d_i_f_f_._{_o_l_d_,_n_e_w_}_M_o_v_e_d_A_l_t_e_r_n_a_t_i_v_e. The change between the
               two colors indicates that a new block was detected.

           dimmed-zebra
               Similar to _z_e_b_r_a, but additional dimming of uninteresting parts
               of moved code is performed. The bordering lines of two adjacent
               blocks are considered interesting, the rest is uninteresting.
               ddiimmmmeedd__zzeebbrraa is a deprecated synonym.

       --no-color-moved
           Turn off move detection. This can be used to override configuration
           settings. It is the same as ----ccoolloorr--mmoovveedd==nnoo.

       --color-moved-ws=<modes>
           This configures how whitespace is ignored when performing the move
           detection for ----ccoolloorr--mmoovveedd. These modes can be given as a comma
           separated list:

           no
               Do not ignore whitespace when performing move detection.

           ignore-space-at-eol
               Ignore changes in whitespace at EOL.

           ignore-space-change
               Ignore changes in amount of whitespace. This ignores whitespace
               at line end, and considers all other sequences of one or more
               whitespace characters to be equivalent.

           ignore-all-space
               Ignore whitespace when comparing lines. This ignores
               differences even if one line has whitespace where the other
               line has none.

           allow-indentation-change
               Initially ignore any whitespace in the move detection, then
               group the moved code blocks only into a block if the change in
               whitespace is the same per line. This is incompatible with the
               other modes.

       --no-color-moved-ws
           Do not ignore whitespace when performing move detection. This can
           be used to override configuration settings. It is the same as
           ----ccoolloorr--mmoovveedd--wwss==nnoo.

       --word-diff[=<mode>]
           Show a word diff, using the <mode> to delimit changed words. By
           default, words are delimited by whitespace; see ----wwoorrdd--ddiiffff--rreeggeexx
           below. The <mode> defaults to _p_l_a_i_n, and must be one of:

           color
               Highlight changed words using only colors. Implies ----ccoolloorr.

           plain
               Show words as [[--rreemmoovveedd--]] and {{++aaddddeedd++}}. Makes no attempts to
               escape the delimiters if they appear in the input, so the
               output may be ambiguous.

           porcelain
               Use a special line-based format intended for script
               consumption. Added/removed/unchanged runs are printed in the
               usual unified diff format, starting with a ++/--/` ` character at
               the beginning of the line and extending to the end of the line.
               Newlines in the input are represented by a tilde ~~ on a line of
               its own.

           none
               Disable word diff again.

           Note that despite the name of the first mode, color is used to
           highlight the changed parts in all modes if enabled.

       --word-diff-regex=<regex>
           Use <regex> to decide what a word is, instead of considering runs
           of non-whitespace to be a word. Also implies ----wwoorrdd--ddiiffff unless it
           was already enabled.

           Every non-overlapping match of the <regex> is considered a word.
           Anything between these matches is considered whitespace and
           ignored(!) for the purposes of finding differences. You may want to
           append ||[[^^[[::ssppaaccee::]]]] to your regular expression to make sure that
           it matches all non-whitespace characters. A match that contains a
           newline is silently truncated(!) at the newline.

           For example, ----wwoorrdd--ddiiffff--rreeggeexx==.. will treat each character as a
           word and, correspondingly, show differences character by character.

           The regex can also be set via a diff driver or configuration
           option, see ggiittaattttrriibbuutteess(5) or ggiitt--ccoonnffiigg(1). Giving it explicitly
           overrides any diff driver or configuration setting. Diff drivers
           override configuration settings.

       --color-words[=<regex>]
           Equivalent to ----wwoorrdd--ddiiffff==ccoolloorr plus (if a regex was specified)
           ----wwoorrdd--ddiiffff--rreeggeexx==<<rreeggeexx>>.

       --no-renames
           Turn off rename detection, even when the configuration file gives
           the default to do so.

       --[no-]rename-empty
           Whether to use empty blobs as rename source.

       --check
           Warn if changes introduce conflict markers or whitespace errors.
           What are considered whitespace errors is controlled by
           ccoorree..wwhhiitteessppaaccee configuration. By default, trailing whitespaces
           (including lines that consist solely of whitespaces) and a space
           character that is immediately followed by a tab character inside
           the initial indent of the line are considered whitespace errors.
           Exits with non-zero status if problems are found. Not compatible
           with --exit-code.

       --ws-error-highlight=<kind>
           Highlight whitespace errors in the ccoonntteexxtt, oolldd or nneeww lines of the
           diff. Multiple values are separated by comma, nnoonnee resets previous
           values, ddeeffaauulltt reset the list to nneeww and aallll is a shorthand for
           oolldd,,nneeww,,ccoonntteexxtt. When this option is not given, and the
           configuration variable ddiiffff..wwssEErrrroorrHHiigghhlliigghhtt is not set, only
           whitespace errors in nneeww lines are highlighted. The whitespace
           errors are colored with ccoolloorr..ddiiffff..wwhhiitteessppaaccee.

       --full-index
           Instead of the first handful of characters, show the full pre- and
           post-image blob object names on the "index" line when generating
           patch format output.

       --binary
           In addition to ----ffuullll--iinnddeexx, output a binary diff that can be
           applied with ggiitt--aappppllyy. Implies ----ppaattcchh.

       --abbrev[=<n>]
           Instead of showing the full 40-byte hexadecimal object name in
           diff-raw format output and diff-tree header lines, show the
           shortest prefix that is at least _<_n_> hexdigits long that uniquely
           refers the object. In diff-patch output format, ----ffuullll--iinnddeexx takes
           higher precedence, i.e. if ----ffuullll--iinnddeexx is specified, full blob
           names will be shown regardless of ----aabbbbrreevv. Non default number of
           digits can be specified with ----aabbbbrreevv==<<nn>>.

       -B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]
           Break complete rewrite changes into pairs of delete and create.
           This serves two purposes:

           It affects the way a change that amounts to a total rewrite of a
           file not as a series of deletion and insertion mixed together with
           a very few lines that happen to match textually as the context, but
           as a single deletion of everything old followed by a single
           insertion of everything new, and the number mm controls this aspect
           of the -B option (defaults to 60%).  --BB//7700%% specifies that less
           than 30% of the original should remain in the result for Git to
           consider it a total rewrite (i.e. otherwise the resulting patch
           will be a series of deletion and insertion mixed together with
           context lines).

           When used with -M, a totally-rewritten file is also considered as
           the source of a rename (usually -M only considers a file that
           disappeared as the source of a rename), and the number nn controls
           this aspect of the -B option (defaults to 50%).  --BB2200%% specifies
           that a change with addition and deletion compared to 20% or more of
           the file’s size are eligible for being picked up as a possible
           source of a rename to another file.

       -M[<n>], --find-renames[=<n>]
           If generating diffs, detect and report renames for each commit. For
           following files across renames while traversing history, see
           ----ffoollllooww. If nn is specified, it is a threshold on the similarity
           index (i.e. amount of addition/deletions compared to the file’s
           size). For example, --MM9900%% means Git should consider a delete/add
           pair to be a rename if more than 90% of the file hasn’t changed.
           Without a %% sign, the number is to be read as a fraction, with a
           decimal point before it. I.e., --MM55 becomes 0.5, and is thus the
           same as --MM5500%%. Similarly, --MM0055 is the same as --MM55%%. To limit
           detection to exact renames, use --MM110000%%. The default similarity
           index is 50%.

       -C[<n>], --find-copies[=<n>]
           Detect copies as well as renames. See also ----ffiinndd--ccooppiieess--hhaarrddeerr. If
           nn is specified, it has the same meaning as for --MM<<nn>>.

       --find-copies-harder
           For performance reasons, by default, --CC option finds copies only if
           the original file of the copy was modified in the same changeset.
           This flag makes the command inspect unmodified files as candidates
           for the source of copy. This is a very expensive operation for
           large projects, so use it with caution. Giving more than one --CC
           option has the same effect.

       -D, --irreversible-delete
           Omit the preimage for deletes, i.e. print only the header but not
           the diff between the preimage and //ddeevv//nnuullll. The resulting patch is
           not meant to be applied with ppaattcchh or ggiitt aappppllyy; this is solely for
           people who want to just concentrate on reviewing the text after the
           change. In addition, the output obviously lacks enough information
           to apply such a patch in reverse, even manually, hence the name of
           the option.

           When used together with --BB, omit also the preimage in the deletion
           part of a delete/create pair.

       -l<num>
           The --MM and --CC options involve some preliminary steps that can
           detect subsets of renames/copies cheaply, followed by an exhaustive
           fallback portion that compares all remaining unpaired destinations
           to all relevant sources. (For renames, only remaining unpaired
           sources are relevant; for copies, all original sources are
           relevant.) For N sources and destinations, this exhaustive check is
           O(N^2). This option prevents the exhaustive portion of rename/copy
           detection from running if the number of source/destination files
           involved exceeds the specified number. Defaults to
           diff.renameLimit. Note that a value of 0 is treated as unlimited.

       --diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]
           Select only files that are Added (AA), Copied (CC), Deleted (DD),
           Modified (MM), Renamed (RR), have their type (i.e. regular file,
           symlink, submodule, ...) changed (TT), are Unmerged (UU), are Unknown
           (XX), or have had their pairing Broken (BB). Any combination of the
           filter characters (including none) can be used. When **
           (All-or-none) is added to the combination, all paths are selected
           if there is any file that matches other criteria in the comparison;
           if there is no file that matches other criteria, nothing is
           selected.

           Also, these upper-case letters can be downcased to exclude. E.g.
           ----ddiiffff--ffiilltteerr==aadd excludes added and deleted paths.

           Note that not all diffs can feature all types. For instance, copied
           and renamed entries cannot appear if detection for those types is
           disabled.

       -S<string>
           Look for differences that change the number of occurrences of the
           specified string (i.e. addition/deletion) in a file. Intended for
           the scripter’s use.

           It is useful when you’re looking for an exact block of code (like a
           struct), and want to know the history of that block since it first
           came into being: use the feature iteratively to feed the
           interesting block in the preimage back into --SS, and keep going
           until you get the very first version of the block.

           Binary files are searched as well.

       -G<regex>
           Look for differences whose patch text contains added/removed lines
           that match <regex>.

           To illustrate the difference between --SS<<rreeggeexx>> ----ppiicckkaaxxee--rreeggeexx and
           --GG<<rreeggeexx>>, consider a commit with the following diff in the same
           file:

               +    return frotz(nitfol, two->ptr, 1, 0);
               ...
               -    hit = frotz(nitfol, mf2.ptr, 1, 0);

           While ggiitt lloogg --GG""ffrroottzz\\((nniittffooll"" will show this commit, ggiitt lloogg
           --SS""ffrroottzz\\((nniittffooll"" ----ppiicckkaaxxee--rreeggeexx will not (because the number of
           occurrences of that string did not change).

           Unless ----tteexxtt is supplied patches of binary files without a
           textconv filter will be ignored.

           See the _p_i_c_k_a_x_e entry in ggiittddiiffffccoorree(7) for more information.

       --find-object=<object-id>
           Look for differences that change the number of occurrences of the
           specified object. Similar to --SS, just the argument is different in
           that it doesn’t search for a specific string but for a specific
           object id.

           The object can be a blob or a submodule commit. It implies the --tt
           option in ggiitt--lloogg to also find trees.

       --pickaxe-all
           When --SS or --GG finds a change, show all the changes in that
           changeset, not just the files that contain the change in <string>.

       --pickaxe-regex
           Treat the <string> given to --SS as an extended POSIX regular
           expression to match.

       -O<orderfile>
           Control the order in which files appear in the output. This
           overrides the ddiiffff..oorrddeerrFFiillee configuration variable (see ggiitt--
           ccoonnffiigg(1)). To cancel ddiiffff..oorrddeerrFFiillee, use --OO//ddeevv//nnuullll.

           The output order is determined by the order of glob patterns in
           <orderfile>. All files with pathnames that match the first pattern
           are output first, all files with pathnames that match the second
           pattern (but not the first) are output next, and so on. All files
           with pathnames that do not match any pattern are output last, as if
           there was an implicit match-all pattern at the end of the file. If
           multiple pathnames have the same rank (they match the same pattern
           but no earlier patterns), their output order relative to each other
           is the normal order.

           <orderfile> is parsed as follows:

           •   Blank lines are ignored, so they can be used as separators for
               readability.

           •   Lines starting with a hash ("##") are ignored, so they can be
               used for comments. Add a backslash ("\\") to the beginning of
               the pattern if it starts with a hash.

           •   Each other line contains a single pattern.

           Patterns have the same syntax and semantics as patterns used for
           fnmatch(3) without the FNM_PATHNAME flag, except a pathname also
           matches a pattern if removing any number of the final pathname
           components matches the pattern. For example, the pattern "ffoooo**bbaarr"
           matches "ffooooaassddffbbaarr" and "ffoooo//bbaarr//bbaazz//aassddff" but not "ffoooobbaarrxx".

       --skip-to=<file>, --rotate-to=<file>
           Discard the files before the named <file> from the output (i.e.
           _s_k_i_p _t_o), or move them to the end of the output (i.e.  _r_o_t_a_t_e _t_o).
           These options were invented primarily for the use of the ggiitt
           ddiiffffttooooll command, and may not be very useful otherwise.

       -R
           Swap two inputs; that is, show differences from index or on-disk
           file to tree contents.

       --relative[=<path>], --no-relative
           When run from a subdirectory of the project, it can be told to
           exclude changes outside the directory and show pathnames relative
           to it with this option. When you are not in a subdirectory (e.g. in
           a bare repository), you can name which subdirectory to make the
           output relative to by giving a <path> as an argument.
           ----nnoo--rreellaattiivvee can be used to countermand both ddiiffff..rreellaattiivvee config
           option and previous ----rreellaattiivvee.

       -a, --text
           Treat all files as text.

       --ignore-cr-at-eol
           Ignore carriage-return at the end of line when doing a comparison.

       --ignore-space-at-eol
           Ignore changes in whitespace at EOL.

       -b, --ignore-space-change
           Ignore changes in amount of whitespace. This ignores whitespace at
           line end, and considers all other sequences of one or more
           whitespace characters to be equivalent.

       -w, --ignore-all-space
           Ignore whitespace when comparing lines. This ignores differences
           even if one line has whitespace where the other line has none.

       --ignore-blank-lines
           Ignore changes whose lines are all blank.

       -I<regex>, --ignore-matching-lines=<regex>
           Ignore changes whose all lines match <regex>. This option may be
           specified more than once.

       --inter-hunk-context=<lines>
           Show the context between diff hunks, up to the specified number of
           lines, thereby fusing hunks that are close to each other. Defaults
           to ddiiffff..iinntteerrHHuunnkkCCoonntteexxtt or 0 if the config option is unset.

       -W, --function-context
           Show whole function as context lines for each change. The function
           names are determined in the same way as ggiitt ddiiffff works out patch
           hunk headers (see _D_e_f_i_n_i_n_g _a _c_u_s_t_o_m _h_u_n_k_-_h_e_a_d_e_r in
           ggiittaattttrriibbuutteess(5)).

       --ext-diff
           Allow an external diff helper to be executed. If you set an
           external diff driver with ggiittaattttrriibbuutteess(5), you need to use this
           option with ggiitt--lloogg(1) and friends.

       --no-ext-diff
           Disallow external diff drivers.

       --textconv, --no-textconv
           Allow (or disallow) external text conversion filters to be run when
           comparing binary files. See ggiittaattttrriibbuutteess(5) for details. Because
           textconv filters are typically a one-way conversion, the resulting
           diff is suitable for human consumption, but cannot be applied. For
           this reason, textconv filters are enabled by default only for ggiitt--
           ddiiffff(1) and ggiitt--lloogg(1), but not for ggiitt--ffoorrmmaatt--ppaattcchh(1) or diff
           plumbing commands.

       --ignore-submodules[=<when>]
           Ignore changes to submodules in the diff generation. <when> can be
           either "none", "untracked", "dirty" or "all", which is the default.
           Using "none" will consider the submodule modified when it either
           contains untracked or modified files or its HEAD differs from the
           commit recorded in the superproject and can be used to override any
           settings of the _i_g_n_o_r_e option in ggiitt--ccoonnffiigg(1) or ggiittmmoodduulleess(5).
           When "untracked" is used submodules are not considered dirty when
           they only contain untracked content (but they are still scanned for
           modified content). Using "dirty" ignores all changes to the work
           tree of submodules, only changes to the commits stored in the
           superproject are shown (this was the behavior until 1.7.0). Using
           "all" hides all changes to submodules.

       --src-prefix=<prefix>
           Show the given source prefix instead of "a/".

       --dst-prefix=<prefix>
           Show the given destination prefix instead of "b/".

       --no-prefix
           Do not show any source or destination prefix.

       --default-prefix
           Use the default source and destination prefixes ("a/" and "b/").
           This overrides configuration variables such as ddiiffff..nnoopprreeffiixx,
           ddiiffff..ssrrccPPrreeffiixx, ddiiffff..ddssttPPrreeffiixx, and ddiiffff..mmnneemmoonniiccPPrreeffiixx (see
           ggiitt--ccoonnffiigg(1)).

       --line-prefix=<prefix>
           Prepend an additional prefix to every line of output.

       --ita-invisible-in-index
           By default entries added by "git add -N" appear as an existing
           empty file in "git diff" and a new file in "git diff --cached".
           This option makes the entry appear as a new file in "git diff" and
           non-existent in "git diff --cached". This option could be reverted
           with ----iittaa--vviissiibbllee--iinn--iinnddeexx. Both options are experimental and
           could be removed in future.

       For more detailed explanation on these common options, see also
       ggiittddiiffffccoorree(7).

GGEENNEERRAATTIINNGG PPAATTCCHH TTEEXXTT WWIITTHH --PP
       Running ggiitt--ddiiffff(1), ggiitt--lloogg(1), ggiitt--sshhooww(1), ggiitt--ddiiffff--iinnddeexx(1), ggiitt--
       ddiiffff--ttrreeee(1), or ggiitt--ddiiffff--ffiilleess(1) with the --pp option produces patch
       text. You can customize the creation of patch text via the
       GGIITT__EEXXTTEERRNNAALL__DDIIFFFF and the GGIITT__DDIIFFFF__OOPPTTSS environment variables (see
       ggiitt(1)), and the ddiiffff attribute (see ggiittaattttrriibbuutteess(5)).

       What the -p option produces is slightly different from the traditional
       diff format:

        1. It is preceded by a "git diff" header that looks like this:

               diff --git a/file1 b/file2

           The aa// and bb// filenames are the same unless rename/copy is
           involved. Especially, even for a creation or a deletion, //ddeevv//nnuullll
           is _n_o_t used in place of the aa// or bb// filenames.

           When a rename/copy is involved, ffiillee11 and ffiillee22 show the name of
           the source file of the rename/copy and the name of the file that
           the rename/copy produces, respectively.

        2. It is followed by one or more extended header lines:

               old mode <mode>
               new mode <mode>
               deleted file mode <mode>
               new file mode <mode>
               copy from <path>
               copy to <path>
               rename from <path>
               rename to <path>
               similarity index <number>
               dissimilarity index <number>
               index <hash>..<hash> <mode>

           File modes are printed as 6-digit octal numbers including the file
           type and file permission bits.

           Path names in extended headers do not include the aa// and bb//
           prefixes.

           The similarity index is the percentage of unchanged lines, and the
           dissimilarity index is the percentage of changed lines. It is a
           rounded down integer, followed by a percent sign. The similarity
           index value of 100% is thus reserved for two equal files, while
           100% dissimilarity means that no line from the old file made it
           into the new one.

           The index line includes the blob object names before and after the
           change. The <mode> is included if the file mode does not change;
           otherwise, separate lines indicate the old and the new mode.

        3. Pathnames with "unusual" characters are quoted as explained for the
           configuration variable ccoorree..qquuootteePPaatthh (see ggiitt--ccoonnffiigg(1)).

        4. All the ffiillee11 files in the output refer to files before the commit,
           and all the ffiillee22 files refer to files after the commit. It is
           incorrect to apply each change to each file sequentially. For
           example, this patch will swap a and b:

               diff --git a/a b/b
               rename from a
               rename to b
               diff --git a/b b/a
               rename from b
               rename to a

        5. Hunk headers mention the name of the function to which the hunk
           applies. See "Defining a custom hunk-header" in ggiittaattttrriibbuutteess(5)
           for details of how to tailor this to specific languages.

CCOOMMBBIINNEEDD DDIIFFFF FFOORRMMAATT
       Any diff-generating command can take the --cc or ----cccc option to produce a
       _c_o_m_b_i_n_e_d _d_i_f_f when showing a merge. This is the default format when
       showing merges with ggiitt--ddiiffff(1) or ggiitt--sshhooww(1). Note also that you can
       give suitable ----ddiiffff--mmeerrggeess option to any of these commands to force
       generation of diffs in a specific format.

       A "combined diff" format looks like this:

           diff --combined describe.c
           index fabadb8,cc95eb0..4866510
           --- a/describe.c
           +++ b/describe.c
           @@@ -98,20 -98,12 +98,20 @@@
                   return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
             }

           - static void describe(char *arg)
            -static void describe(struct commit *cmit, int last_one)
           ++static void describe(char *arg, int last_one)
             {
            +      unsigned char sha1[20];
            +      struct commit *cmit;
                   struct commit_list *list;
                   static int initialized = 0;
                   struct commit_name *n;

            +      if (get_sha1(arg, sha1) < 0)
            +              usage(describe_usage);
            +      cmit = lookup_commit_reference(sha1);
            +      if (!cmit)
            +              usage(describe_usage);
            +
                   if (!initialized) {
                           initialized = 1;
                           for_each_ref(get_name);



        1. It is preceded by a "git diff" header, that looks like this (when
           the --cc option is used):

               diff --combined file

           or like this (when the ----cccc option is used):

               diff --cc file

        2. It is followed by one or more extended header lines (this example
           shows a merge with two parents):

               index <hash>,<hash>..<hash>
               mode <mode>,<mode>..<mode>
               new file mode <mode>
               deleted file mode <mode>,<mode>

           The mmooddee <<mmooddee>>,,<<mmooddee>>....<<mmooddee>> line appears only if at least one of
           the <mode> is different from the rest. Extended headers with
           information about detected content movement (renames and copying
           detection) are designed to work with the diff of two <tree-ish> and
           are not used by combined diff format.

        3. It is followed by a two-line from-file/to-file header:

               --- a/file
               +++ b/file

           Similar to the two-line header for the traditional _u_n_i_f_i_e_d diff
           format, //ddeevv//nnuullll is used to signal created or deleted files.

           However, if the --combined-all-paths option is provided, instead of
           a two-line from-file/to-file, you get an N+1 line from-file/to-file
           header, where N is the number of parents in the merge commit:

               --- a/file
               --- a/file
               --- a/file
               +++ b/file

           This extended format can be useful if rename or copy detection is
           active, to allow you to see the original name of the file in
           different parents.

        4. Chunk header format is modified to prevent people from accidentally
           feeding it to ppaattcchh --pp11. Combined diff format was created for
           review of merge commit changes, and was not meant to be applied.
           The change is similar to the change in the extended _i_n_d_e_x header:

               @@@ <from-file-range> <from-file-range> <to-file-range> @@@

           There are (number of parents + 1) @@ characters in the chunk header
           for combined diff format.

       Unlike the traditional _u_n_i_f_i_e_d diff format, which shows two files A and
       B with a single column that has -- (minus — appears in A but removed in
       B), ++ (plus — missing in A but added to B), or "" "" (space — unchanged)
       prefix, this format compares two or more files file1, file2,... with
       one file X, and shows how X differs from each of fileN. One column for
       each of fileN is prepended to the output line to note how X’s line is
       different from it.

       A -- character in the column N means that the line appears in fileN but
       it does not appear in the result. A ++ character in the column N means
       that the line appears in the result, and fileN does not have that line
       (in other words, the line was added, from the point of view of that
       parent).

       In the above example output, the function signature was changed from
       both files (hence two -- removals from both file1 and file2, plus ++++ to
       mean one line that was added does not appear in either file1 or file2).
       Also, eight other lines are the same from file1 but do not appear in
       file2 (hence prefixed with ++).

       When shown by ggiitt ddiiffff--ttrreeee --cc, it compares the parents of a merge
       commit with the merge result (i.e. file1..fileN are the parents). When
       shown by ggiitt ddiiffff--ffiilleess --cc, it compares the two unresolved merge
       parents with the working tree file (i.e. file1 is stage 2 aka "our
       version", file2 is stage 3 aka "their version").

EEXXAAMMPPLLEESS
       ggiitt sshhooww vv11..00..00
           Shows the tag vv11..00..00, along with the object the tag points at.

       ggiitt sshhooww vv11..00..00^^{{ttrreeee}}
           Shows the tree pointed to by the tag vv11..00..00.

       ggiitt sshhooww --ss ----ffoorrmmaatt==%%ss vv11..00..00^^{{ccoommmmiitt}}
           Shows the subject of the commit pointed to by the tag vv11..00..00.

       ggiitt sshhooww nneexxtt~~1100::DDooccuummeennttaattiioonn//RREEAADDMMEE
           Shows the contents of the file DDooccuummeennttaattiioonn//RREEAADDMMEE as they were
           current in the 10th last commit of the branch nneexxtt.

       ggiitt sshhooww mmaasstteerr::MMaakkeeffiillee mmaasstteerr::tt//MMaakkeeffiillee
           Concatenates the contents of said Makefiles in the head of the
           branch mmaasstteerr.

DDIISSCCUUSSSSIIOONN
       Git is to some extent character encoding agnostic.

       •   The contents of the blob objects are uninterpreted sequences of
           bytes. There is no encoding translation at the core level.

       •   Path names are encoded in UTF-8 normalization form C. This applies
           to tree objects, the index file, ref names, as well as path names
           in command line arguments, environment variables and config files
           (..ggiitt//ccoonnffiigg (see ggiitt--ccoonnffiigg(1)), ggiittiiggnnoorree(5), ggiittaattttrriibbuutteess(5)
           and ggiittmmoodduulleess(5)).

           Note that Git at the core level treats path names simply as
           sequences of non-NUL bytes, there are no path name encoding
           conversions (except on Mac and Windows). Therefore, using non-ASCII
           path names will mostly work even on platforms and file systems that
           use legacy extended ASCII encodings. However, repositories created
           on such systems will not work properly on UTF-8-based systems (e.g.
           Linux, Mac, Windows) and vice versa. Additionally, many Git-based
           tools simply assume path names to be UTF-8 and will fail to display
           other encodings correctly.

       •   Commit log messages are typically encoded in UTF-8, but other
           extended ASCII encodings are also supported. This includes
           ISO-8859-x, CP125x and many others, but _n_o_t UTF-16/32, EBCDIC and
           CJK multi-byte encodings (GBK, Shift-JIS, Big5, EUC-x, CP9xx etc.).

       Although we encourage that the commit log messages are encoded in
       UTF-8, both the core and Git Porcelain are designed not to force UTF-8
       on projects. If all participants of a particular project find it more
       convenient to use legacy encodings, Git does not forbid it. However,
       there are a few things to keep in mind.

        1. _g_i_t _c_o_m_m_i_t and _g_i_t _c_o_m_m_i_t_-_t_r_e_e issue a warning if the commit log
           message given to it does not look like a valid UTF-8 string, unless
           you explicitly say your project uses a legacy encoding. The way to
           say this is to have ii1188nn..ccoommmmiittEEnnccooddiinngg in ..ggiitt//ccoonnffiigg file, like
           this:

               [i18n]
                       commitEncoding = ISO-8859-1

           Commit objects created with the above setting record the value of
           ii1188nn..ccoommmmiittEEnnccooddiinngg in their eennccooddiinngg header. This is to help other
           people who look at them later. Lack of this header implies that the
           commit log message is encoded in UTF-8.

        2. _g_i_t _l_o_g, _g_i_t _s_h_o_w, _g_i_t _b_l_a_m_e and friends look at the eennccooddiinngg
           header of a commit object, and try to re-code the log message into
           UTF-8 unless otherwise specified. You can specify the desired
           output encoding with ii1188nn..llooggOOuuttppuuttEEnnccooddiinngg in ..ggiitt//ccoonnffiigg file,
           like this:

               [i18n]
                       logOutputEncoding = ISO-8859-1

           If you do not have this configuration variable, the value of
           ii1188nn..ccoommmmiittEEnnccooddiinngg is used instead.

       Note that we deliberately chose not to re-code the commit log message
       when a commit is made to force UTF-8 at the commit object level,
       because re-coding to UTF-8 is not necessarily a reversible operation.

GGIITT
       Part of the ggiitt(1) suite

Git 2.45.1                        2024-04-24                       GIT-SHOW(1)
